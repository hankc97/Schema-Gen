// Code generated by schema-generate. DO NOT EDIT.

package gen_schema

import (
    "encoding/json"
    "fmt"
)

// Defaults 
type Defaults struct {
  Run *Run `yaml:"run,omitempty"`
}

// Root 
type Root struct {

  // A map of default settings that will apply to all jobs in the workflow.
  Defaults *Defaults `yaml:"defaults,omitempty"`
}

// Run 
type Run struct {
  Shell string `yaml:"shell,omitempty"`
  WorkingDirectory string `yaml:"working-directory,omitempty"`
}

func (strct *Defaults) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "run":
            if err := json.Unmarshal([]byte(v), &strct.Run); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Root) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "defaults":
            if err := json.Unmarshal([]byte(v), &strct.Defaults); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Run) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "shell":
            if err := json.Unmarshal([]byte(v), &strct.Shell); err != nil {
                return err
             }
        case "working-directory":
            if err := json.Unmarshal([]byte(v), &strct.WorkingDirectory); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
